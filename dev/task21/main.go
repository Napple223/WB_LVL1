package main

import "fmt"

//Реализовать паттерн «адаптер» на любом примере.

//Паттерн Adapter относится к структурным паттернам уровня класса(типа).

//Часто в новом проекте разработчики хотят повторно использовать
//уже существующий код. Например, имеющиеся классы(типы) могут обладать
//нужной функциональностью и иметь при этом несовместимые интерфейсы.
//В таких случаях следует использовать паттерн Adapter.
//Смысл работы этого паттерна в том, что если у вас есть класс(тип) и
//его интерфейс не совместим с кодом вашей системы,
//то что бы разрешить этот конфликт, мы не изменяем код этого класса(типа),
//а пишем для него адаптер.
//Другими словами Adapter адаптирует существующий
//код к требуемому интерфейсу (является переходником).

//Допустим есть тип ПК.
type pc struct{}

//Мы можем подколючать девайсы к ПК по USB.
func (pc *pc) usbConn(d device) {
	fmt.Println("USB подключен.")
	d.plugInUSB()
}

//Интерфейс ПК.
type device interface {
	plugInUSB()
}

//Также есть тип телефон, который
//может быть подключен по USB.
type phone struct{}

//Метод подключения телефона по USB.
func (p *phone) plugInUSB() {
	fmt.Println("Телефон подключился к ПК по USB.")
}

//А также есть тип фонарик.
type flashlight struct{}

//Фонарик может заряжаться по USB.
func (f *flashlight) chargeFromUSB() {
	fmt.Println("Фонарик заряжается.")
}

//Фонарик также может быть подключен к ПК по USB,
//но имеет поведение, отличное от требуемого (plugInUSB).
//С помощью паттерна Адаптер мы можем адаптировать
//фонарик к поведению, ожидаемому типом PC.

//Адаптер для фонарика.
type flashlightAdapter struct {
	*flashlight
}

//Метод, позволяющий "подогнать" поведение
//фонарика под требования pc.
func (fa *flashlightAdapter) plugInUSB() {
	fa.chargeFromUSB()
}

//Функция-конструктор для инициализации адаптера.
func newFlashlightAdapter(f *flashlight) *flashlightAdapter {
	return &flashlightAdapter{flashlight: f}
}

func main() {
	//Инициализируем экземпляр pc.
	pc := &pc{}
	//Инициализируем экземпляр телефона.
	phone := &phone{}
	//Поведение телефона при подключение к pc.
	pc.usbConn(phone)
	//Инициализируем экземпляр фонарика.
	flashlight := &flashlight{}
	//Инициализируем адаптер.
	adapter := newFlashlightAdapter(flashlight)
	//Проверяем что адаптировали поведение фонарика
	//к ожидаемому pc.
	pc.usbConn(adapter)
}
