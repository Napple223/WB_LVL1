package main

import (
	"fmt"
)

//Дана последовательность чисел: 2,4,6,8,10.
//Найти сумму их квадратов(2^2+3^2+4^2….)
//с использованием конкурентных вычислений.

//Вариант с использованием каналов для синхронизации горутин.

//Каналы - это объект связи, с помощью которого горутины
//обмениваются данными.
//Технически это конвейер (или труба), откуда можно
//считывать или помещать данные. То есть одна горутина
//может отправить данные в канал, а другая — считать
//помещенные в этот канал данные.
//Данный вариант рекомендован разработчиками языка.

func main() {
	i := [5]int{2, 4, 6, 8, 10}
	var res int //Переменная для хранения результата.

	//Создаем канал для обмена данными.
	//Каналы бывают буфферизированными и небуфферизированными.
	//В данном случае предлагаю использовать буфферизированный
	//канал, чтобы не блокировать горутины в момент вычитки
	//данных из канала.
	data := make(chan int, len(i))

	//Проходим циклом по всем значениям массива.
	for _, v := range i {
		//Горутина для выполнения вычислений квадратов чисел.
		//В данном варианте должна принимать в себя канал
		//для записи в него результата вычислений.
		//Мы можем ограничивать действия,
		//производимые с каналом, меняя местоположение "<-"
		//т.е. <-chan позволяет только читать данные из канала,
		//chan<- позволяет только писать данные в канал,
		//просто chan без "<-" позволяет писать и читать в канал.
		go func(v int, data chan<- int) {
			//Записываем в канал результат вычислений.
			data <- v * v
		}(v, data)
	}
	//Необходимо убедиться, что мы вычитали все данные
	//из канала.
	for j := 0; j < cap(data); j++ {
		res += <-data
	}
	//Закрываем канал.
	close(data)
	fmt.Println(res) //220
}
