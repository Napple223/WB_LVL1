package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

//Дана последовательность чисел: 2,4,6,8,10.
//Найти сумму их квадратов(2^2+3^2+4^2….)
//с использованием конкурентных вычислений.

//Вариант решения с использованием атомиков.

//Атомики - это один из способов синхронизации горутин.
//Является примитивом синхронизации низкого уровня и
//гарантирует, что одномоментно общим ресурсом (в нашем
//случае переменной типа int64) будет пользоваться только
//1 поток до тех пор, пока не будет выполнена
//требуемая оперция.
//Даннный вариант не рекомендован к использованию, так
//как использует средства пакета unsafe.

func main() {
	//Создаем массив.
	i := [5]int64{2, 4, 6, 8, 10}
	var res int64 //Переменная для хранения результата.
	//WaitGroup для ожидания завершения работы всех горутин.
	var wg sync.WaitGroup
	//Цикл для обхода всех значений массива.
	for _, v := range i {
		//Прибавляем +1 к счетчику.
		wg.Add(1)
		//Горутина для выполнения конкурентных вычислений.
		go func(v int64) {
			//Атомарная операция, прибавляющая к результату
			//вычисления квадрат числа.
			atomic.AddInt64(&res, v*v)
			//Уменьшаем счетчик на 1 по завершению работы горутины.
			wg.Done()
		}(v)
	}
	//Дожидаемся завершения работы горутин.
	wg.Wait()
	//Печатаем результат вычислений в stdout.
	fmt.Println(res) //220
}
