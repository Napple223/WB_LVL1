package main

import (
	"context"
	"fmt"
	"sync"
)

//Реализовать все возможные способы остановки выполнения горутины.

//Вариант с использованием контекста. Контекст позволяет нам
//передавать какие-либо данные в нашей программе в контексте.
//Контекст может быть родительским и наследуемым.
//Позволяет более тонко настроить взимодействие компонентов программы.

func main() {
	//Создаем контекст для завершения работы и передаем в него
	//олдительский контекст.
	ctx, cancel := context.WithCancel(context.Background())
	//Создаем канал для отправки и получения данных.
	data := make(chan int)
	//WaitGroup для наглядности
	var wg sync.WaitGroup
	wg.Add(1)
	//Запускаем горутину
	go func(ctx context.Context, data <-chan int) {
		for {
			select {
			//В случае получения контекста, завершаем работу горутины.
			case <-ctx.Done():
				fmt.Println("Получен контекст. Горутина завершает работу")
				wg.Done()
				return
			case d := <-data:
				fmt.Printf("Получены данные: %d\n", d)
			}
		}
	}(ctx, data)

	for i := 1; i <= 5; i++ {
		data <- i
	}
	//Сигнализируем о необходимости завершить работу горутины.
	cancel()
	//Дожидаемся завершения работы горутины.
	wg.Wait()
	close(data)
}
