package main

import (
	"fmt"
	"sync"
)

//Реализовать все возможные способы остановки выполнения горутины.

//Вариант с проверкой канала. У канала можно вернуть булевое значение,
//сигнализирующее о том, закрыт канал (false) или открыт (true).
//По идее всегда надо проверять это значение, так как, если начать
//писать в закрытый канал, то получим панику, а если читать из
//закрытого канала, то будем получать дефолтные значения типа канала.
//Удобный способ, если много горутин читает из 1 канала.

func main() {
	//Создаем канал для записи и чтения данных.
	data := make(chan int)
	//Используем WaitGroup для наглядности.
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		for {
			//Проверяем булевое значение ok канала. Если канал открыт
			//читааем из него значение, а если закрыт - завершаем
			//работу горутины.
			v, ok := <-data
			if !ok {
				fmt.Println("Канал закрыт. Горутина завершает работу.")
				wg.Done()
				return
			}
			fmt.Printf("Получены данные из канала: %d\n", v)
		}
	}()

	for i := 1; i <= 5; i++ {
		data <- i
	}
	//Закрываем канал, чтобы инициализировать завершение работы горутин.
	close(data)
	wg.Wait()
}
