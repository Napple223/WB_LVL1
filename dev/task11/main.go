package main

import "fmt"

//Реализовать пересечение двух неупорядоченных множеств.

//Способ поиска пересечений с помощью мап.

func main() {
	//На вход принимаем 2 неупорядоченных слайса int.
	arr1 := []int{23, 3, 1, 2, 18}
	arr2 := []int{6, 2, 4, 23, 1, 3}

	//Убеждаемся что первый слайс самый маленький,
	//если нет, меняем их местами.
	if len(arr1) > len(arr2) {
		arr1, arr2 = arr2, arr1
	}
	//Создаем мап, где ключом будут элементы первого слайса,
	//а значением количество повторений в 2 слайсах.
	interseption := make(map[int]int, len(arr1)-1)
	//Добавлем ключи в мап.
	for _, v := range arr1 {
		interseption[v] = 1
	}
	//Проверяем пересечения. Если найдено пересечение,
	//добавляем к значению мап +1.
	//Если не найдено, то игнорируем значение.
	for _, v := range arr2 {
		_, ok := interseption[v]
		if !ok {
			continue
		}
		interseption[v]++
	}
	//Создаем буфер для добавления пересечений из мап.
	//Т.к. это позволит нам эффективно аппендить в слайс
	//без доп. аллокаций памяти.
	res := make([]int, len(arr1), len(arr1))
	var idx int

	//Проходим циклом по всем элементам мап и добавляем
	//в res слайс все ключи, где найдено пересечение.
	for k, v := range interseption {
		if v == 2 {
			res[idx] = k
			idx++
		}
	}
	//Обрезаем наш слайс до индекса последнего
	//добавленного значения.
	res = res[0:idx]
	fmt.Println(res)
}
